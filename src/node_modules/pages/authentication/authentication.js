import React, { useState, useEffect, useContext } from 'react'
import { Link, Redirect } from 'react-router-dom'
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from 'contexts/currentUser'
import BackendErrorMessages from 'components/backendErrorMessages'

//отвечает за страницы регистрации и логина

const Authentication = (props) => {

  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const isLoginPage = props.match.path === '/login'
  const apiUrl = isLoginPage ? '/users/login' : '/users'
  const [{ isLoading, error, response }, doFetch] = useFetch(apiUrl)
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)
  const [ , setToken] = useLocalStorage('token');
  const [ , dispatch] = useContext(CurrentUserContext)
  const pageTitle =  isLoginPage ? 'Sign in' : 'Sign up'
  const descriptionLink = isLoginPage ? '/register' : '/login'
  const descriptionText = isLoginPage ? 'Need an account?' : 'Have an account?'


  //  console.log(currentUserState)

  const handleSubmit = (e) => {
    e.preventDefault();
    const user = isLoginPage ? {email, password} : {username, email, password}

    doFetch({
      method: 'POST',
      data: {
        user
      }
    })
  }

  useEffect(() =>{
    if (!response) {
      return
    }
    setToken(response.user.token)
    setIsSuccessfullSubmit(true);
    dispatch({type: 'SET_AUTHORIZED', payload: response.user})
    //мерджим старый стейт, который был передан из контекста и перезаписываем поля
    // setCurrentUserState(state => ({
    //   ...state,
    //   isLoggedIn: true,
    //   isLoading: false,
    //   currentUser: response.user
    // }))
    // console.log('response', response)
  }, [response, setToken, dispatch])

  if (isSuccessfullSubmit) {
    return <Redirect to='/'/>
  }


  return (
    <div className='auth-page'>
      <div className='container page'>
        <div className='row'>
          <div className='col-md-6 offset-md-3 col-xs-12'>
            <h1 className='text-xs-center'>{pageTitle}</h1>
            <p className='text-xs-center'>
              <Link to={descriptionLink}>{descriptionText}</Link>
            </p>
            <form onSubmit={handleSubmit}>
              {error && <BackendErrorMessages backendError={error.errors}/>}
              <fieldset>
                {!isLoginPage && (
                  <fieldset className='form-group'>
                  <input
                  type='text'
                  className='form-control from-control lg'
                  placeholder='Username'
                  value={username}
                  onChange={e => setUsername(e.target.value)}/>
                </fieldset>
                )}
                <fieldset className='form-group'>
                  <input
                  type='email'
                  className='form-control from-control lg'
                  placeholder='Email'
                  value={email}
                  onChange={e => setEmail(e.target.value)}/>
                </fieldset>
                <fieldset className='form-group'>
                  <input
                  type='password'
                  className='form-control from-control lg'
                  placeholder='Password'
                  value={password}
                  onChange={e => setPassword(e.target.value)}/>
                </fieldset>
                <button
                className='btn btn-lg btn-primary pull-xs-right'
                type='submit'
                disabled={isLoading}>
                  {pageTitle}
                </button>
              </fieldset>
            </form>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Authentication
