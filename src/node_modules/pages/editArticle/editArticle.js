import React, {useEffect, useState, useContext} from 'react';
import ArticleForm from 'components/articleForm'
import useFetch from 'hooks/useFetch'
import { Redirect } from 'react-router-dom'
import {CurrentUserContext} from 'contexts/currentUser'

const EditArticle = ({match}) => {
  const slug = match.params.slug
  // console.log(slug)
  const _apiUrl = `/articles/${slug}`
  const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(_apiUrl)
  const [
    {response: updateArticleResponse, error: updateArticleError},
    doUpdateArticle
  ] = useFetch(_apiUrl)
  const [initialValues, setInitialValues] = useState(null);
  const [currentUserState] = useContext(CurrentUserContext)
  const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)


  const handeSubmit = (article) => {
    console.log('handleSubmit', article)
    doUpdateArticle({
      method: 'PUT',
      data: {
        article
      }
    })
  }

  useEffect(() => {
    doFetchArticle()

  }, [doFetchArticle])

  useEffect(() => {
    if (!fetchArticleResponse) {
      return
    }

    setInitialValues({
      title: fetchArticleResponse.article.title,
      body: fetchArticleResponse.article.body,
      description: fetchArticleResponse.article.description,
      tagList: fetchArticleResponse.article.tagList,
    })
  }, [fetchArticleResponse])

  useEffect(() => {
    if (!updateArticleResponse) {
      return
    }
    setIsSuccessfullSubmit(true)
  }, [updateArticleResponse])

  if (currentUserState.isLoggedIn === false) {
    return <Redirect to='/'/>
  }

  if (isSuccessfullSubmit) {
    return <Redirect to={`/articles/${slug}`}/>
  }


  return (
    <div>
      <ArticleForm
      onSubmit={handeSubmit}
      errors={ (updateArticleError && updateArticleError.errors) || {} }
      initialValues={initialValues}/>
    </div>
  );
};

export default EditArticle;
