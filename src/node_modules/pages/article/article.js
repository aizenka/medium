import React, { useContext, useEffect, useState } from 'react'
import useFetch from 'hooks/useFetch'
import Loading from 'components/loading';
import ErrorMessage from 'components/errorMessage';
import { Link, Redirect } from 'react-router-dom';
import TagList from 'components/tagList'
import {CurrentUserContext} from 'contexts/currentUser';


const Article = ({match}) => {
  const slug = match.params.slug
  const _apiUrl = `/articles/${slug}`
  const [{response: fetchArticleResponse,
        isLoading: fetchArticleIsLoading,
        error: fetchArticleError},
        doFetch] = useFetch(_apiUrl)
  const [{response: deleteArticleResponse}, doDeleteArticle] = useFetch(_apiUrl)
  const [currentUserState] = useContext(CurrentUserContext)
  const [isSuccessfullDelete, setIsSuccessfullDelete] = useState(false)

  const isAuthor = () => {
    if (!fetchArticleResponse || !currentUserState.isLoggedIn) {
      return
    }
    return fetchArticleResponse.article.author.username === currentUserState.currentUser.username
  }

  const deleteArticle = () => {
    doDeleteArticle({
      method: 'Delete'
    })
  }
  // console.log(isAuthor())

  useEffect(() => {
    doFetch()
  }, [doFetch])
  // console.log(response)

  useEffect(() => {
    if (!deleteArticleResponse) {
      return
    }
    setIsSuccessfullDelete(true)
  }, [deleteArticleResponse])

  if (isSuccessfullDelete) {
    return <Redirect to={'/'}/>
  }

return (
  <div className='article-page'>
    <div className='banner'>
      {!fetchArticleIsLoading && fetchArticleResponse && (
        <div className='container'>
          <h1>{fetchArticleResponse.article.title}</h1>
          <div className='article-meta'>
            <Link to={`/profiles/${fetchArticleResponse.article.author.username}`}>
              <img src={fetchArticleResponse.article.author.image} alt='user avatar'/>
            </Link>
            <div className='info'>
            <Link to={`/profiles/${fetchArticleResponse.article.author.username}`}>
              {fetchArticleResponse.article.author.username}
            </Link>
            <span className='date'>{fetchArticleResponse.article.createdAt}</span>
            </div>
            {isAuthor() && (
              <span>
                <Link to={`/articles/${fetchArticleResponse.article.slug}/edit`}
                className='btn btn-outline-secondary btn-sm'>
                <i className='ion-edit'></i>
                  Edit article
                </Link>
                &nbsp;
                <button
                className='btn btn-outline-danger btn-sm'
                onClick={deleteArticle}>
                  <i className='ion-trash-a'></i>
                  Delete article
                </button>
              </span>
            )}
          </div>
        </div>
      )}
    </div>
    <div className='container page'>
      {fetchArticleIsLoading && <Loading/>}
      {fetchArticleError && <ErrorMessage/>}
      {!fetchArticleIsLoading && fetchArticleResponse && (
        <div className='row article-content'>
          <div className='col-xs-12'>
            <div>
              <p>{fetchArticleResponse.article.body}</p>
            </div>
            <TagList tags={fetchArticleResponse.article.tagList}/>
          </div>
        </div>
      )}
    </div>
  </div>
)
}
export default Article;
